Index: Server/src/main/java/com/server/server/models/PacketHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.server.server.models;\n\nimport com.server.server.utils.*;\nimport com.server.server.utils.handleStrategies.*;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class PacketHandler implements Runnable {\n    private final AtomicInteger id;\n    private final Socket socket;\n    private ObjectOutputStream objectOutputStream;\n    private ObjectInputStream objectInputStream;\n    private final Map<String, PacketHandlerStrategy> strategies;\n\n    public PacketHandler(AtomicInteger id, Socket socket) {\n        this.id = id;\n        this.socket = socket;\n        try {\n            this.objectOutputStream = new ObjectOutputStream(socket.getOutputStream());\n        } catch (IOException e) {\n            System.err.println(\"Error creating output stream: \" + e.getMessage());\n        }\n        try {\n            this.objectInputStream = new ObjectInputStream(socket.getInputStream());\n        } catch (IOException e) {\n            System.err.println(\"Error creating input stream: \" + e.getMessage());\n        }\n        this.strategies = new HashMap<>();\n        this.strategies.put(\"register\", new RegisterStrategy());\n        this.strategies.put(\"login\", new LoginStrategy());\n        this.strategies.put(\"mail\", new EmailStrategy());\n        this.strategies.put(\"delete\", new DeleteStrategy());\n        this.strategies.put(\"refresh\", new RefreshStrategy());\n    }\n\n    private void closeConnections() {\n        if (socket != null) {\n            try {\n                objectInputStream.close();\n                objectOutputStream.close();\n                socket.close();\n            } catch (IOException e) {\n                System.err.println(\"Error closing connections: \" + e.getMessage());\n            }\n        }\n    }\n\n    @Override\n    public void run() {\n        Logger logger = Logger.getInstance();\n        try {\n            System.out.println(\"Waiting for packet...\");\n            Packet packet = (Packet) objectInputStream.readObject(); //wait for packet\n            System.out.println(\"Received packet: \" + packet.getOperation());\n\n            if(!PacketUtils.isValidSender(packet.getSender())){\n                logger.log(\"Received packet with invalid sender: \" + packet.getSender(), \"Error\");\n                Packet responsePacket = new Packet(\"failed\", \"invalid sender\", \"server\");\n                PacketUtils.sendPacket(responsePacket, objectOutputStream);\n                return;\n            }\n\n            PacketHandlerStrategy strategy = strategies.get(packet.getOperation());\n            if (strategy != null) {\n                if(strategy instanceof EmailStrategy){ //introduce id to email\n                    Email email = (Email) packet.getPayload(); //check if payload is email\n                    email.setId(id.getAndIncrement());\n                    packet.setPayload(email);\n                }\n                strategy.handlePacket(packet, objectOutputStream, logger);\n            } else {\n                Packet responsePacket = new Packet(\"failed\", \"unknown packet operation\", \"server\");\n                PacketUtils.sendPacket(responsePacket, objectOutputStream);\n                logger.log(\"Received unknown packet type: \" + packet.getOperation(), \"Error\");\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            System.err.println(\"Error reading packet: \" + e.getMessage());\n        } finally {\n            closeConnections();\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/src/main/java/com/server/server/models/PacketHandler.java b/Server/src/main/java/com/server/server/models/PacketHandler.java
--- a/Server/src/main/java/com/server/server/models/PacketHandler.java	(revision b23f1be6bd2ffa39714fae0bf2d6b92a81f7f698)
+++ b/Server/src/main/java/com/server/server/models/PacketHandler.java	(date 1702040627697)
@@ -55,9 +55,7 @@
     public void run() {
         Logger logger = Logger.getInstance();
         try {
-            System.out.println("Waiting for packet...");
             Packet packet = (Packet) objectInputStream.readObject(); //wait for packet
-            System.out.println("Received packet: " + packet.getOperation());
 
             if(!PacketUtils.isValidSender(packet.getSender())){
                 logger.log("Received packet with invalid sender: " + packet.getSender(), "Error");
