Index: Server/src/main/java/com/server/server/models/Logger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.server.server.models;\n\nimport javafx.application.Platform;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\n\nimport java.io.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Logger {\n    private static Logger instance;\n    private final File logFile;\n    private final StringProperty latestLogEvent = new SimpleStringProperty();\n    private final StringProperty latestLogDate = new SimpleStringProperty();\n    private final StringProperty latestLogType = new SimpleStringProperty();\n    private final AtomicInteger logCounter = new AtomicInteger(0);\n\n    private Logger() {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd_MM_yyyy_HH_mm_ss\");\n        String baseDir = System.getProperty(\"user.dir\");\n        String relativePath = \"/Server/src/main/resources/com/server/server/logs/\";\n        File directory = new File(baseDir + relativePath);\n        if (!directory.exists()) {\n            boolean created = directory.mkdirs(); // This will create the directory if it doesn't exist\n            if(created){\n                System.out.println(\"Created directory for logs\");\n            }\n            else{\n                System.err.println(\"Failed to create directory for logs\");\n            }\n        }\n        logFile = new File(directory, \"log_\" + formatter.format(new Date()) + \".csv\");\n    }\n    public static Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String type) {\n        try (FileWriter writer = new FileWriter(logFile, true)) {\n            String stringDate = String.valueOf(new Date());\n            writer.write(message + \", \" + type+ \", \"+ stringDate + logCounter.incrementAndGet() + \"\\n\");\n            writer.flush();\n            writer.close();\n            Platform.runLater(() -> {\n                latestLogEvent.set(message);\n                latestLogDate.set(null); // Reset the latestLogDate since there can be duplicates\n                latestLogDate.set(stringDate);\n                latestLogType.set(null); // Reset the latestLogType, same reason of LogDate\n                latestLogType.set(type);\n            });\n        } catch (Exception e) {\n            System.err.println(\"Exception occurred while logging: \" + e.getMessage());\n        }\n    }\n\n    public StringProperty latestLogEventProperty() {\n        return latestLogEvent;\n    }\n\n    public StringProperty latestLogDateProperty() {\n        return latestLogDate;\n    }\n\n    public StringProperty latestLogTypeProperty() {\n        return latestLogType;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/src/main/java/com/server/server/models/Logger.java b/Server/src/main/java/com/server/server/models/Logger.java
--- a/Server/src/main/java/com/server/server/models/Logger.java	
+++ b/Server/src/main/java/com/server/server/models/Logger.java	
@@ -24,11 +24,10 @@
         File directory = new File(baseDir + relativePath);
         if (!directory.exists()) {
             boolean created = directory.mkdirs(); // This will create the directory if it doesn't exist
-            if(created){
-                System.out.println("Created directory for logs");
-            }
-            else{
-                System.err.println("Failed to create directory for logs");
+            if (created) {
+                System.out.println("Created logs directory");
+            } else {
+                System.out.println("Failed to create logs directory");
             }
         }
         logFile = new File(directory, "log_" + formatter.format(new Date()) + ".csv");
@@ -47,10 +46,11 @@
             writer.flush();
             writer.close();
             Platform.runLater(() -> {
+                latestLogEvent.set(null); // Reset the latestLogEvent since there can be duplicates
                 latestLogEvent.set(message);
-                latestLogDate.set(null); // Reset the latestLogDate since there can be duplicates
+                latestLogDate.set(null); // Reset the latestLogDate same reason of latestLogEvent
                 latestLogDate.set(stringDate);
-                latestLogType.set(null); // Reset the latestLogType, same reason of LogDate
+                latestLogType.set(null); // Reset the latestLogType, same reason of latestLogEvent
                 latestLogType.set(type);
             });
         } catch (Exception e) {
